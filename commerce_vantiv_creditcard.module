<?php
/**
 * @file
 * Provides a credit card payment method for Vantiv.
 */

define('VANTIV_TXN_MODE_PRODUCTION', 'production');
define('VANTIV_TXN_MODE_INTEGRATION', 'integration');
define('VANTIV_INTEGRATION_LOCAL', 'local');
define('VANTIV_INTEGRATION_EPROTECT', 'eprotect');
define('VANTIV_INTEGRATION_IFRAME', 'iframe');

/**
 * Implements hook_libraries_info().
 */
function commerce_vantiv_creditcard_libraries_info() {
  return [
    'vantiv-devhub-php' => [
      'name' => 'Vantiv DevHub API Client Library for PHP',
      'vendor url' => 'https://apideveloper.vantiv.com/',
      'download url' => 'https://github.com/steveoliver/vantiv-devhub-sdk-php',
      'dependencies' => [],
      'version arguments' => [
        'file' => 'VERSION',
        'pattern' => '/(\d+\.\d+\.\d+)/',
      ],
      'files' => [
        'php' => [
          'src/Vantiv/Base.php',
          'src/Vantiv/Configuration.php',
          'src/Vantiv/Request.php',
          'src/Vantiv/Request/Credit/Authorization.php',
          'src/Vantiv/Request/Credit/AuthorizationCompletion.php',
          'src/Vantiv/Request/Credit/CaptureGivenAuth.php',
          'src/Vantiv/Request/Credit/Credit.php',
          'src/Vantiv/Request/Credit/CreditReturn.php',
          'src/Vantiv/Request/Credit/Force.php',
          'src/Vantiv/Request/Credit/Reversal.php',
          'src/Vantiv/Request/Credit/Sale.php',
          'src/Vantiv/Request/Credit/Void.php',
          'src/Vantiv/Request/Services/PaymentAccountCreate.php',
          'src/Vantiv/Response.php',
          'src/Vantiv/Response/Credit/AuthorizationResponse.php',
          'src/Vantiv/Response/Credit/AuthorizationCompletionResponse.php',
          'src/Vantiv/Response/Credit/CaptureGivenAuthResponse.php',
          'src/Vantiv/Response/Credit/CaptureResponse.php',
          'src/Vantiv/Response/Credit/CreditResponse.php',
          'src/Vantiv/Response/Credit/CreditReturnResponse.php',
          'src/Vantiv/Response/Credit/ForceCaptureResponse.php',
          'src/Vantiv/Response/Credit/ReversalResponse.php',
          'src/Vantiv/Response/Credit/SaleResponse.php',
          'src/Vantiv/Response/Credit/VoidResponse.php',
          'src/Vantiv/Response/Services/PaymentAccountCreateResponse.php',
        ],
      ],
    ],
  ];
}

/**
 * Brings the Vantiv php client library into scope.
 */
function commerce_vantiv_creditcard_load_library() {
  $library = libraries_load('vantiv-devhub-php');
  if (!$library || empty($library['loaded'])) {
    watchdog('commerce_vantiv_creditcard', 'Failure to load Vantiv DevHub API PHP SDK.', [], WATCHDOG_CRITICAL);
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vantiv_creditcard_commerce_payment_method_info() {
  $payment_methods = [];
  $payment_methods['commerce_vantiv_creditcard'] = [
    'title' => t('Credit Card via Vantiv'),
    'description' => t('Provides credit card processing through Vantiv.'),
    'active' => TRUE,
  ];

  $cardonfile = FALSE;
  $payment_method_rule = rules_config_load('commerce_payment_commerce_vantiv_creditcard');
  if ($payment_method_rule && $payment_method_rule->active) {
    foreach ($payment_method_rule->actions() as $action) {
      // Skip any actions that are not simple rules actions. (i.e. loops)
      if (!($action instanceof RulesAction)) {
        continue;
      }
      // Check if card on file functionality is enabled in the payment method.
      if (!empty($action->settings['payment_method']['method_id']) && $action->settings['payment_method']['method_id'] == 'commerce_vantiv_creditcard') {
        $cardonfile = !empty($action->settings['payment_method']['settings']['cardonfile']) ? TRUE : FALSE;
        break;
      }
    }
  }
  if ($cardonfile) {
    $payment_methods['commerce_vantiv_creditcard']['cardonfile'] = [
      'charge callback' => 'commerce_vantiv_creditcard_cardonfile_charge',
      'delete callback' => 'commerce_vantiv_creditcard_cardonfile_delete',
      'create form callback' => 'commerce_vantiv_creditcard_cardonfile_create_form',
      'create callback' => 'commerce_vantiv_creditcard_cardonfile_create',
      'update callback' => 'commerce_vantiv_creditcard_cardonfile_update',
    ];
  }

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_vantiv_creditcard_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/vantiv-creditcard-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_creditcard_capture_form', 3, 5),
    'access callback' => 'commerce_vantiv_creditcard_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'commerce_vantiv_creditcard.admin.inc',
  );
  // Add a menu item for processing credits.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/vantiv-creditcard-credit'] = array(
    'title' => 'Credit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_creditcard_credit_form', 3, 5),
    'access callback' => 'commerce_vantiv_creditcard_credit_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'commerce_vantiv_creditcard.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Vantiv
 *   credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return bool
 *   TRUE or FALSE indicating capture access.
 */
function commerce_vantiv_creditcard_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Vantiv Credit Card or isn't
  // awaiting capture.
  if ($transaction->payment_method != 'commerce_vantiv_creditcard' || empty($transaction->remote_id) ||
    $transaction->remote_status != COMMERCE_CREDIT_AUTH_ONLY) {
    return FALSE;
  }

  // Return FALSE if transaction is a failure.
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > _commerce_vantiv_creditcard_authorization_lifespan($transaction->data['card_type'])) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the credit transaction form for Vantiv
 *   credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be credited.
 *
 * @return bool
 *   TRUE or FALSE indicating credit access.
 */
function commerce_vantiv_creditcard_credit_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Vantiv Credit Card, isn't
  // an auth completion or sale transaction.
  if ($transaction->payment_method != 'commerce_vantiv_creditcard' || empty($transaction->remote_id) ||
    !in_array($transaction->remote_status, [COMMERCE_CREDIT_CAPTURE_ONLY, COMMERCE_CREDIT_AUTH_CAPTURE])) {
    return FALSE;
  }

  // Return FALSE if transaction is a failure.
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * @return array Default settings for the Vantiv Credit Card payment method.
 */
function _commerce_vantiv_creditcard_default_settings() {
  return [
    'license' => '',
    'merchant_id' => '1147003',
    'paypage_id' => 'MDTt5iuXQ2ma99Lb',
    'report_group' => '',
    'integration_type' => VANTIV_INTEGRATION_LOCAL,
    'txn_mode' => VANTIV_TXN_MODE_INTEGRATION,
    'txn_type' => COMMERCE_CREDIT_CAPTURE_ONLY,
    'cardonfile' => 0,
    'log' => ['request' => 0, 'response' => 0]
  ];
}

/**
 * Payment method callback: settings form.
 */
function commerce_vantiv_creditcard_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + _commerce_vantiv_creditcard_default_settings();

  $form = [];

  $form['license'] = [
    '#type' => 'textarea',
    '#title' => t('License ID'),
    '#description' => t('Your Vantiv application License ID. Visit !url to register for an account if you do not already have one.', ['!url' => 'https://apideveloper.vantiv.com/user/register']),
    '#default_value' => $settings['license'],
    '#required' => TRUE,
  ];
  $form['merchant_id'] = [
    '#type' => 'textfield',
    '#title' => t('Merchant ID (Acceptor ID)'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  ];
  $form['paypage_id'] = [
    '#type' => 'textfield',
    '#title' => t('PayPage ID'),
    '#default_value' => $settings['paypage_id'],
    '#required' => FALSE,
  ];
  $form['report_group'] = [
    '#type' => 'textfield',
    '#title' => t('Report Group'),
    '#default_value' => $settings['report_group'],
    '#required' => TRUE,
  ];
  $form['integration_type'] = [
    '#type' => 'radios',
    '#title' => t('Integration type'),
    '#options' => [
      VANTIV_INTEGRATION_LOCAL => t('Local (stores cards on server)'),
      VANTIV_INTEGRATION_EPROTECT => t('eProtect (stores tokens on server)'),
      VANTIV_INTEGRATION_IFRAME => t('iframe (embedded external payment form)')
    ],
    '#default_value' => $settings['integration_type']
  ];
  $form['txn_mode'] = [
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to Production when you are ready to start processing real payments.') . '<br />' . t('Only use Integration for testing your application integration with Vantiv.'),
    '#options' => [
      VANTIV_TXN_MODE_PRODUCTION => t('Production (Live)'),
      VANTIV_TXN_MODE_INTEGRATION => t('Integration (Testing)'),
    ],
    '#default_value' => $settings['txn_mode'],
  ];
  $form['txn_type'] = [
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => [
      COMMERCE_CREDIT_CAPTURE_ONLY => t('Sale (Authorization and capture)'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ],
    '#default_value' => $settings['txn_type']
  ];
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality'),
      '#default_value' => $settings['cardonfile'],
    ];
  }
  else {
    $form['cardonfile'] = [
      '#type' => 'markup',
      '#markup' => t('To enable Card on File functionality, download and install the Card on File module.'),
    ];
  }
  $form['log'] = [
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => [
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ],
    '#default_value' => $settings['log'],
  ];

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_vantiv_creditcard_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  // Build the common credit card form.
  $form = _commerce_vantiv_creditcard_submit_form_common($payment_method);

  $js_settings = [
    'checkout_pane' => isset($checkout_pane),
    'payment_pane' => !isset($checkout_pane),
  ];

  // Modify the form per integration type.
  switch ($payment_method['settings']['integration_type']) {
    case VANTIV_INTEGRATION_EPROTECT:
      _commerce_vantiv_creditcard_submit_form_eprotect(
        $form, $payment_method, $pane_values, $checkout_pane, $order
      );
      break;
    case VANTIV_INTEGRATION_LOCAL:
      _commerce_vantiv_creditcard_submit_form_local(
        $form, $payment_method, $pane_values, $checkout_pane, $order
      );
      break;
    case VANTIV_INTEGRATION_IFRAME:
      // ...
      break;
  }

  drupal_add_js(['vantiv' => $js_settings], 'setting');
  return $form;
}

/**
 * Generates common form elements for all Vantiv credit card payment forms.
 *
 * @param array $payment_method
 * @param array $pane_values
 * @param array $checkout_pane
 * @param stdClass $order
 *
 * @return array Forms API array.
 */
function _commerce_vantiv_creditcard_submit_form_common($payment_method) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $credit_card_fields = [
    'owner' => '',
    'number' => '',
    'exp_month' => '',
    'exp_year' => '',
    'code' => '',
  ];
  $defaults = [];
  $form = commerce_payment_credit_card_form($credit_card_fields, $defaults);

  $form['credit_card']['code']['#required'] = FALSE;

  return $form;
}

function _commerce_vantiv_creditcard_submit_form_local(&$form, $payment_method, $order) {
}

/**
 * Modify the credit card submit form for the eProtect integration mode.
 *
 * @param array $form Common credit card form.
 * @param array $payment_method
 * @param array $pane_values
 * @param array $checkout_pane
 * @param stdClass $order
 */
function _commerce_vantiv_creditcard_submit_form_eprotect(&$form, $payment_method, $order) {

  $order = isset($order) ? $order : new stdClass();

  // Add a css class so that we can easily identify Vantiv related input fields
  // Do not require the fields
  //
  // Remove "name" attributes from Vantiv related input elements to
  // prevent card data to be sent to Drupal server.
  $credit_card_fields = ['number', 'code'];
  foreach ($credit_card_fields as $key) {
    $credit_card_field = &$form['credit_card'][$key];
    $credit_card_field['#attributes']['class'][] = 'commerce-vantiv-creditcard';
    $credit_card_field['#required'] = FALSE;
    $credit_card_field['#post_render'][] = '_commerce_vantiv_creditcard_form_remove_name_element';
  }

  // Add authorization and request fields.
  $form['request$paypageId'] = [
    '#type' => 'hidden',
    '#attributes' => ['id' => 'request$paypageId'],
    '#value' => $payment_method['settings']['paypage_id']
  ];
  $form['request$merchantTxnId'] = [
    '#type' => 'hidden',
    '#attributes' => ['id' => 'request$merchantTxnId'],
    '#value' => $payment_method['settings']['merchant_id']
  ];
  $form['request$orderId'] = [
    '#type' => 'hidden',
    '#attributes' => ['id' => 'request$orderId'],
    '#value' => (!empty($order) && isset($order->order_id)) ? $order->order_id : 0
  ];
  $form['request$reportGroup'] = [
    '#type' => 'hidden',
    '#attributes' => ['id' => 'request$reportGroup'],
    '#value' => _commerce_vantiv_creditcard_get_report_group($payment_method, $order),
  ];

  // Add hidden response fields for storing information return by PayPage.
  foreach([
    'response$paypageRegistrationId',
    'response$bin',
    'response$code',
    'response$message',
    'response$responseTime',
    'response$type',
    'response$litleTxnId',
    'response$firstSix',
    'response$lastFour'
  ] as $hiddenpaypagefield) {
    $form[$hiddenpaypagefield] = [
      '#type' => 'hidden',
      '#value' => '',
      '#attributes' => [
        'id' => $hiddenpaypagefield,
      ]
    ];
  }

  // Initialize JS attachments if necessary.
  if (empty($form['#attached']) || empty($form['#attached']['js'])) {
    $form['#attached']['js'] = [];
  }
  // Add API and client JS to form.
  // @todo: Change JS based on payment_method.settings.txn_mode.
  $form['#attached']['js']['https://request-prelive.np-securepaypage-litle.com/LitlePayPage/litle-api2.js'] = [
    'type' => 'external',
    'scope' => 'footer'
  ];
  $module_path = drupal_get_path('module', 'commerce_vantiv_creditcard');
  $form['#attached']['js'][$module_path . '/commerce_vantiv_creditcard-eprotect.js'] = [
    'scope' => 'footer'
  ];
}

/**
 * Removes 'name' attribute from Vantiv eProtect form elements
 */
function _commerce_vantiv_creditcard_form_remove_name_element($content, $element) {
  $name_pattern = '/\sname\s*=\s*[\'"]?' . preg_quote($element['#name']) . '[\'"]?/';
  return preg_replace($name_pattern, '', $content);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_vantiv_creditcard_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = []) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $card_details = $pane_values['credit_card'];

  $settings = [
    'form_parents' => array_merge($form_parents, ['credit_card']),
  ];

  // Even though a form error triggered by the validate handler would be enough
  // to stop the submission of the form, it's not enough to stop it from a
  // Commerce standpoint because of the combined validation / submission going
  // on per-pane in the checkout form. Thus even with a call to form_set_error()
  // this validate handler must still return FALSE.
  // Generic card validation:
  // if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
  //   return FALSE;
  // }
  // (instead/for now we use our own validation):

  if (empty($pane_values['cardonfile'])) {
    switch ($payment_method['settings']['integration_type']) {
      case VANTIV_INTEGRATION_LOCAL:
        // Validate the card type is valid and supported by Vantiv.
        $types = array_keys(commerce_payment_credit_card_types());
        $supported_types = array_keys(_commerce_vantiv_creditcard_types());
        $type = commerce_payment_validate_credit_card_type($card_details['number'], $types);
        $supported_type = commerce_payment_validate_credit_card_type($card_details['number'], $supported_types);
        if (!$supported_type) {
          $error_element = implode('][', array_merge($settings['form_parents'], ['number']));
          $error_message = t('@type not supported', [
            '@type' => $type ? $types[$type] : 'Credit card type'
          ]);
          form_set_error($error_element, $error_message);
          return FALSE;
        }
        break;
      case VANTIV_INTEGRATION_EPROTECT:
        // Card number + CVV validation happens client-side.
        // @see commerce_vantiv_creditcard-eprotect.js.
        break;
      case VANTIV_INTEGRATION_IFRAME:
        // @todo
        break;
    }
  }
}

/**
 * Payment method callback: submit form submission.
 * Called by checkout as well as Add payment form.
 */
function commerce_vantiv_creditcard_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  // If instructed to do so, try using the specified card on file.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    $card_data = commerce_cardonfile_load($pane_values['cardonfile']);
    if (empty($card_data) || $card_data->status == 0) {
      drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
      return FALSE;
    }

    if (!commerce_vantiv_creditcard_cardonfile_charge($payment_method, $card_data, $order, $charge)) {
      return FALSE;
    }
    return TRUE;
  }

  // Just as an example, we might store information in the order object from the
  // payment parameters, though we would never save a full credit card number,
  // even in examples!
  // $number = $pane_values['credit_card']['number'];
  // $pane_values['credit_card']['number'] = substr($number, 0, 4) . str_repeat('-', strlen($number) - 8) . substr($number, -4);

  // Every attempted transaction should result in a new transaction entity being
  // created for the order to log either the success or the failure.
  if (!commerce_vantiv_creditcard_order_charge($payment_method, $pane_values, $order, $charge)) {
    return FALSE;
  }
}

/**
 * Creates a payment transaction for the specified method, order, and charge.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_vantiv_creditcard_order_charge($payment_method, $pane_values, $order, $charge) {
  if (!commerce_vantiv_creditcard_load_library()) {
    drupal_set_message(t('Error making the payment. Please contact shop admin to proceed.'), 'error');
    return FALSE;
  }

  $integration_type = $payment_method['settings']['integration_type'];
  $txn_type = $payment_method['settings']['txn_type'];

  $card_details = $pane_values['credit_card'];

  // [hidden] form fields containing ajax response values from JS.
  $form_values = [];

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $billing_address = [];
  if (!empty($order->commerce_customer_billing)) {
    if (!empty($order_wrapper->commerce_customer_billing->commerce_customer_address)) {
      $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    }
  }

  $address = [
    'BillingName' => $card_details['owner'],
    'BillingAddress1' => !empty($billing_address['thoroughfare']) ? $billing_address['thoroughfare'] : '',
    'BillingAddress2' => !empty($billing_address['premise']) ? $billing_address['premise'] : '',
    'BillingCity' => !empty($billing_address['locality']) ? $billing_address['locality'] : '',
    'BillingState' => !empty($billing_address['administrative_area']) ? $billing_address['administrative_area'] : '',
    'BillingZipcode' => !empty($billing_address['postal_code']) ? $billing_address['postal_code'] : '',
    'BillingCountry' => !empty($billing_address['country']) ? $billing_address['country'] : '',
  ];

  // Initialize configuration.
  $config = new Vantiv\Configuration([
    'license' => _commerce_vantiv_creditcard_get_license($payment_method),
    'api_version' => _commerce_vantiv_creditcard_get_api_version($payment_method),
    'base_url' => _commerce_vantiv_creditcard_get_base_url($payment_method)
  ]);

  // Initialize request.
  if ($txn_type == COMMERCE_CREDIT_CAPTURE_ONLY) {
    $request = new Vantiv\Request\Credit\Sale($config);
  }
  else if ($txn_type == COMMERCE_CREDIT_AUTH_ONLY) {
    $request = new Vantiv\Request\Credit\Authorization($config);
  }

  // Build request body from order and payment details.
  $request_body = [
    'Credentials' => [
      'AcceptorID' => _commerce_vantiv_creditcard_get_merchant_id($payment_method)
    ],
    'Reports' => [
      'ReportGroup' => _commerce_vantiv_creditcard_get_report_group($payment_method, $order)
    ],
    'Transaction' => [
      'ReferenceNumber' => $order->order_id,
      'TransactionAmount' => commerce_vantiv_creditcard_amount_to_decimal($charge['amount'], $charge['currency_code']),
      'OrderSource' => 'ecommerce', // @todo parameterize?
      'CustomerID' => $order->uid
    ],
    'Address' => $address,
    'Application' => [
      'ApplicationID' => $order->order_id . $txn_type
    ],
  ];

  // Save card type for future transactions (i.e. auth capture)
  $card_type = '';

  switch($integration_type) {
    case VANTIV_INTEGRATION_LOCAL:
      if (1) {
        $types = array_keys(commerce_payment_credit_card_types());
        $type = commerce_payment_validate_credit_card_type($card_details['number'], $types);
        $vantiv_types = _commerce_vantiv_creditcard_types();
        $vantiv_type = $vantiv_types[$type];
        $card_type = $vantiv_type;
        $request_body['Card'] = [
          'Type' => $vantiv_type,
          'CardNumber' => $card_details['number'],
          'ExpirationMonth' => $card_details['exp_month'],
          'ExpirationYear' => substr($card_details['exp_year'], -2),
          'CVV' => $card_details['code']
        ];
      }
      // if (0) {
      //   $request_body['Token'] = array();
      // }
      break;
    case VANTIV_INTEGRATION_EPROTECT:
      // Supports values from both Checkout and Terminal forms.
      $form_values = isset($_POST['payment_details']) ? $_POST['payment_details'] : $_POST['commerce_payment']['payment_details'];
      $card_type = $form_values['response$type'];
      $request_body['Card'] = [
        'Type' => $form_values['response$type'],
        'PaypageRegistrationID' => $form_values['response$paypageRegistrationId'],
        'ExpirationMonth' => $card_details['exp_month'],
        'ExpirationYear' => substr($card_details['exp_year'], -2)
      ];
      break;
    case VANTIV_INTEGRATION_IFRAME:
      // @todo
      break;
  }

  // Initialize a payment transaction to give us a new unique transaction id.
  // Vantiv requests should all contain a unique ApplicationID.
  $transaction = commerce_payment_transaction_new('commerce_vantiv_creditcard', $order->order_id);
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);
  $request_body['Application']['ApplicationID'] .= $transaction->transaction_id;

  // Send request.
  $response = $request->send($request_body);

  // Remove CVV and mask all but last 4 of card number.
  if ($integration_type == VANTIV_INTEGRATION_LOCAL && ($request_body['Card'])) {
    $number = $request_body['Card']['CardNumber'];
    $request_body['Card']['CardNumber'] = '...' . substr($number, -4);
    unset($request_body['Card']['CVV']);
  }

  // Get response details.
  $request_id = $response['response']->getRequestID();
  $response_body = $response['response']->getResponse();
  $response_code = $response['http_code'];

  $success = FALSE;
  if ($response_code == 200 && in_array($response_body->response, ['000', '001', '010'])) {
    $success = TRUE;
  }

  $log = [];
  if ($payment_method['settings']['log']['request']) {
    $log['request'] = [
      'type' => get_class($request),
      'body' => $request_body
    ];
  }
  else {
    $log['request'] = t('Logging not enabled for requests. Enable at @url', [
      '@url' => 'admin/commerce/config/payment-methods'
    ]);
  }
  if ($payment_method['settings']['log']['response']) {
    $log['response'] = [
      'type' => get_class($response['response']),
      'body' => $response_body
    ];
  }
  else {
    $log['response'] = t('Logging not enabled for responses. Enable at @url', [
      '@url' => 'admin/commerce/config/payment-methods'
    ]);
  }
  $transaction->payload[$request_id] = $log;
  if (!$success) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    switch ($txn_type) {
      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;
    }
  }
  $transaction->message = $transaction->status;
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->data = [
    'card_type' => $card_type
  ];
  $transaction->remote_id = $response_body->TransactionID;
  $transaction->remote_status = $txn_type;
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  commerce_payment_transaction_save($transaction);

  if (!$success) {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response_body->message), 'error');
    return FALSE;
  }

  // If so instructed by the customer, save the card.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['credit_card']['cardonfile_store']) && $pane_values['credit_card']['cardonfile_store'] && property_exists($response_body, 'tokenResponse')) {
    $card_values = array_merge($card_details, $form_values);
    $card = _commerce_vantiv_creditcard_create_cardonfile($card_values, $response_body->tokenResponse, $order->uid, $payment_method);
    if ($card) {
      _commerce_vantiv_creditcard_save_cardonfile($card, $pane_values['cardonfile_instance_default']);
    }
  }

  return $transaction;
}

/**
 * Implements hook_commerce_cardonfile_checkout_pane_form_alter().
 *
 * Adds a CVV field to the cardonfile form.
 */
function commerce_vantiv_creditcard_commerce_cardonfile_checkout_pane_form_alter(&$form, &$parent_form) {
  // Do not attach field if (new) credit card form is visible.
  if (isset($parent_form['commerce_payment']['payment_details']) && (!isset($parent_form['commerce_payment']['payment_details']['credit_card']['#access']) || $parent_form['commerce_payment']['payment_details']['credit_card']['#access'] != FALSE)) {
    return;
  }

  // Do not attach if payment method information is unavailable.
  if (!isset($parent_form['commerce_payment']) || !isset($parent_form['commerce_payment']['payment_method']) || !isset($parent_form['commerce_payment']['payment_method']['#default_value'])) {
    return;
  }

  // Get payment method information.
  list($payment_method_id) = explode('|', $parent_form['commerce_payment']['payment_method']['#default_value']);
  $payment_method = commerce_payment_method_load($payment_method_id);

  // Exit if payment method is not capable of Card on File, or Card on File
  // functionality is disabled in the payment method instance.
  if (!_commerce_cardonfile_capable_payment_method_check($payment_method) || (isset($payment_method['settings']['cardonfile']) && !$payment_method['settings']['cardonfile'])) {
    return;
  }

  if ($payment_method_id == 'commerce_vantiv_creditcard' && $parent_form['commerce_payment']['payment_details']['credit_card']['#access'] == FALSE) {

    // Add CVV field for each card on file charge form instance.
    $form['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Security code'),
      '#default_value' => '',
      '#attributes' => array('autocomplete' => 'off'),
      '#required' => FALSE,
      '#maxlength' => 4,
      '#size' => 4,
    );
  }
}

/**
 * Creates a payment transaction for the specified method, order, and charge.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_vantiv_creditcard_cardonfile_charge($payment_method, $card_data, $order, $charge) {
  if (!commerce_vantiv_creditcard_load_library()) {
    drupal_set_message(t('Error making the payment. Please contact shop admin to proceed.'), 'error');
    return FALSE;
  }

  $txn_type = $payment_method['settings']['txn_type'];

  // Initialize configuration.
  $config = new Vantiv\Configuration([
    'license' => _commerce_vantiv_creditcard_get_license($payment_method),
    'api_version' => _commerce_vantiv_creditcard_get_api_version($payment_method),
    'base_url' => _commerce_vantiv_creditcard_get_base_url($payment_method)
  ]);

  // Initialize request.
  if ($txn_type == COMMERCE_CREDIT_CAPTURE_ONLY) {
    $request = new Vantiv\Request\Credit\Sale($config);
  }
  else if ($txn_type == COMMERCE_CREDIT_AUTH_ONLY) {
    $request = new Vantiv\Request\Credit\Authorization($config);
  }

  // Build request body from order and payment details.
  $request_body = [
    'Credentials' => [
      'AcceptorID' => _commerce_vantiv_creditcard_get_merchant_id($payment_method)
    ],
    'Reports' => [
      'ReportGroup' => _commerce_vantiv_creditcard_get_report_group($payment_method, $order)
    ],
    'Transaction' => [
      'ReferenceNumber' => $order->order_id,
      'TransactionAmount' => commerce_vantiv_creditcard_amount_to_decimal($charge['amount'], $charge['currency_code']),
      'OrderSource' => 'ecommerce', // @todo parameterize?
      'CustomerID' => $order->uid
    ],
    'Application' => [
      'ApplicationID' => $order->order_id . $txn_type
    ],
    'PaymentAccount' => [
      'PaymentAccountID' => $card_data->remote_id,
    ],
    'Card' => [
      'ExpirationMonth' => str_pad($card_data->card_exp_month, 2, '0', STR_PAD_LEFT),
      'ExpirationYear' => substr($card_data->card_exp_year, -2),
      // POSTed from commerce_vantiv_creditcard_commerce_cardonfile_checkout_pane_form_alter().
      'CVV' => $_POST['commerce_payment']['payment_details']['code']
    ]
  ];

  // Initialize a payment transaction to give us a new unique transaction id.
  // Vantiv requests should all contain a unique ApplicationID.
  $transaction = commerce_payment_transaction_new('commerce_vantiv_creditcard', $order->order_id);
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);
  $request_body['Application']['ApplicationID'] .= $transaction->transaction_id;

  // Send request.
  $response = $request->send($request_body);

  // Get response details.
  $request_id = $response['response']->getRequestID();
  $response_body = $response['response']->getResponse();
  $response_code = $response['http_code'];

  // Build log and complete transaction.
  $log = [];
  if ($payment_method['settings']['log']['request']) {
    $log['request'] = [
      'type' => get_class($request),
      'body' => $request_body
    ];
  }
  else {
    $log['request'] = t('Logging not enabled for requests. Enable at @url', [
      '@url' => 'admin/commerce/config/payment-methods'
    ]);
  }
  if ($payment_method['settings']['log']['response']) {
    $log['response'] = [
      'type' => get_class($response['response']),
      'body' => $response_body
    ];
  }
  else {
    $log['response'] = t('Logging not enabled for responses. Enable at @url', [
      '@url' => 'admin/commerce/config/payment-methods'
    ]);
  }
  $transaction->payload[$request_id] = $log;
  if ($response_code !== 200 || empty($response_body) || !in_array($response_body->response, [000, 001, 010])) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    switch ($txn_type) {
      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;
    }
  }
  $transaction->message = $transaction->status;
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response_body->TransactionID;
  $transaction->remote_status = $txn_type;
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  commerce_payment_transaction_save($transaction);

  if ($transaction->status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    drupal_set_message(t('Could not process payment. Please try again or contact the site administrator.'), 'error');
    return FALSE;
  }

  return $transaction;
}

/**
 * Card on file callback: create form
 */
function commerce_vantiv_creditcard_cardonfile_create_form($form, &$form_state, $op, $card_data) {
  // Pass along information to the validate and submit handlers.
  $form_state['card_data'] = $card_data;
  $form_state['op'] = $op;

  $payment_method = commerce_payment_method_instance_load($card_data->instance_id);

  // Build the common credit card form.
  $form = _commerce_vantiv_creditcard_submit_form_common($payment_method);

  $js_settings = [
    'cardonfile_form' => TRUE,
    'checkout_pane' => FALSE,
    'payment_pane' => FALSE,
  ];

  $order = new stdClass();

  // Modify the form per integration type.
  switch ($payment_method['settings']['integration_type']) {
    case VANTIV_INTEGRATION_EPROTECT:
      _commerce_vantiv_creditcard_submit_form_eprotect($form, $payment_method, $order);
      break;
    case VANTIV_INTEGRATION_LOCAL:
      _commerce_vantiv_creditcard_submit_form_local($form, $payment_method, $order);
      break;
    case VANTIV_INTEGRATION_IFRAME:
      // ...
      break;
  }

  $form['credit_card']['cardonfile_instance_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use as default card for payments with %method', array('%method' => $payment_method['display_title'])),
    '#default_value' => FALSE,
  );

  drupal_add_js(['vantiv' => $js_settings], 'setting');

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add card')
  );

  return $form;
}

/**
 * Validation handler for card on file creation callback.
 */
function commerce_vantiv_creditcard_cardonfile_create_validate($form, &$form_state) {
}

/**
 * Submission handler for card on file creation callback.
 */
function commerce_vantiv_creditcard_cardonfile_create_form_submit($form, &$form_state) {
  $card_data = $form_state['card_data'];
  $payment_method = commerce_payment_method_instance_load($card_data->instance_id);
  commerce_vantiv_creditcard_cardonfile_create($form, $form_state, $payment_method, $card_data);
  $form_state['redirect'] = 'user/' . $card_data->uid . '/cards';
}

/**
 * Card on file callback: create
 */
function commerce_vantiv_creditcard_cardonfile_create($form, &$form_state, $payment_method, $card_data) {
  if (!commerce_vantiv_creditcard_load_library()) {
    drupal_set_message(t('Error saving card on file. Please contact shop admin to proceed.'), 'error');
    return FALSE;
  }

  $integration_type = $payment_method['settings']['integration_type'];
  $card_values = $form_state['input']['credit_card'];
  $form_values = $form_state['input'];

  // Initialize configuration.
  $config = new Vantiv\Configuration([
    'license' => _commerce_vantiv_creditcard_get_license($payment_method),
    'api_version' => _commerce_vantiv_creditcard_get_api_version($payment_method),
    'base_url' => _commerce_vantiv_creditcard_get_base_url($payment_method)
  ]);

  // Initialize request.
  $request = new Vantiv\Request\Services\PaymentAccountCreate($config);

  // Build request body.
  $order = new stdClass();
  $request_body = [
    'Credentials' => [
      'AcceptorID' => _commerce_vantiv_creditcard_get_merchant_id($payment_method)
    ],
    'Reports' => [
      'ReportGroup' => _commerce_vantiv_creditcard_get_report_group($payment_method, $order)
    ],
    'Transaction' => [
      'CustomerID' => $card_data->uid
    ],
    'Application' => [
      'ApplicationID' => $card_data->uid . 'pac' // (payment account create)
    ],
  ];

  switch ($integration_type) {
    case VANTIV_INTEGRATION_LOCAL:
      $reference_number = $card_data->uid . '-' . substr($card_values['number'], -4);
      $request_body['Card']['AccountNumber'] = $card_values['number'];
      $request_body['Card']['CVV'] = $card_values['code'];
      $request_body['Transaction']['ReferenceNumber'] = $reference_number;
      break;
    case VANTIV_INTEGRATION_EPROTECT:
      $reference_number = $card_data->uid . '-' . $form_values['response$lastFour'];
      $request_body['Card']['PaypageRegistrationID'] = $form_values['response$paypageRegistrationId'];
      $request_body['Transaction']['ReferenceNumber'] = $reference_number;
      break;
    case VANTIV_INTEGRATION_IFRAME:
      // ...
      break;
  }

  // Send request.
  $response = $request->send($request_body);

  // Parse response.
  $request_id = $response['response']->getRequestID();
  $response_body = $response['response']->getResponse();
  $response_code = $response['http_code'];

  // Remove CVV and mask all but last 4 of card number.
  if ($integration_type == VANTIV_INTEGRATION_LOCAL && ($request_body['Card'])) {
    $number = $request_body['Card']['AccountNumber'];
    $request_body['Card']['AccountNumber'] = '...' . substr($number, -4);
    unset($request_body['Card']['CVV']);
  }

  if (!in_array($response_body->response, ['000', '001', '010'])) {
    watchdog('commerce_vantiv_creditcard', 'Could not create card ending in @number (@msgid)', [
      '@number' => substr($card_data->card_number, -4),
      '@msgid' => $request_id
    ]);
    return FALSE;
  }

  $card = _commerce_vantiv_creditcard_create_cardonfile($card_values, $response_body, $card_data->uid, $payment_method);
  if (!$card) {
    return FALSE;
  }
  $default = $card_values['cardonfile_instance_default'];
  if (_commerce_vantiv_creditcard_save_cardonfile($card, $card_data->uid, $payment_method, $default)) {
    drupal_set_message(t('Successfully saved card ending in @number', ['@number' => $card->card_number]));
    watchdog('commerce_vantiv_creditcard', 'Successfully saved card ending in @number (@msgid)', [
      '@number' => $card->card_number,
      '@msgid' => $request_id
    ]);
  }
}

/**
 * Card on file callback: update.
 */
function commerce_vantiv_creditcard_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  // Perform any API-side actions here if needed.
  // If we ever wanted to allow CVV values to be updated, we could do that here.
  // We would also need to implement a hook_form_alter() since the standard card
  // update form only includes expiration month and year.
  // Vantiv supports updating the CVV/2 with a PaymentAccountUpdate service call.
  return TRUE;
}

/**
 * Card on file callback: delete.
 */
function commerce_vantiv_creditcard_cardonfile_delete($form, &$form_state, $payment_method, $card_data) {
  // Perform any API-side actions here if needed.
  return TRUE;
}

/**
 * @param array $card_values
 * @param \stdClass $token_response
 * @param int $uid
 * @param array $payment_method
 *
 * @return bool|stdClass A commerce_cardonfile_new() object or FALSE if failure.
 */
function _commerce_vantiv_creditcard_create_cardonfile($card_values = [], stdClass $token_response, $uid, $payment_method) {
  if (!property_exists($token_response, 'PaymentAccountID')) {
    watchdog('commerce_vantiv_creditcard', 'Could not create a card on file because no PaymentAccountID was found.');
    return FALSE;
  }
  // Populate and save the card
  $card_data = commerce_cardonfile_new();
  $card_data->uid = $uid;
  $card_data->payment_method = $payment_method['method_id'];
  $card_data->instance_id = $payment_method['instance_id'];
  $card_data->remote_id = $token_response->PaymentAccountID;
  $card_data->card_type = $token_response->Type;
  $card_data->card_name = $card_values['owner'];
  $card_data->card_number = substr($token_response->PaymentAccountID, -4);
  $card_data->card_exp_month = $card_values['exp_month'];
  $card_data->card_exp_year = $card_values['exp_year'];
  $card_data->status = 1;
  $card_data->instance_default = 0;

  return $card_data;
}

/**
 * @param CommerceCardOnFile $card
 * @param bool $set_default
 * @return mixed SAVED_NEW|SAVED_UPDATED|FALSE
 */
function _commerce_vantiv_creditcard_save_cardonfile(CommerceCardOnFile &$card, $set_default) {
  $saved = commerce_cardonfile_save($card);
  if ($saved === FALSE) {
    return FALSE;
  }
  if ($set_default) {
    commerce_cardonfile_set_default_card($card->card_id);
  }
  return TRUE;
}

/**
 * Returns list of Vantiv supported credit card type codes keyed by Commerce
 * Payment card type codes.
 */
function _commerce_vantiv_creditcard_types() {
  $commerce_types = commerce_payment_credit_card_types();
  $commerce_types['amex'] = 'AX';
  $commerce_types['dci'] = 'DC'; // (International. supported?)
  $commerce_types['dc'] = 'DC';
  $commerce_types['discover'] = 'DI';
  $commerce_types['jcb'] = 'JC';
  $commerce_types['mastercard'] = 'MC';
  $commerce_types['visa'] = 'VI';
  // Carte Blanche cards not supported.
  unset($commerce_types['cb']);

  return $commerce_types;
}

/**
 * Formats a price for a particular currency, in a Vantiv acceptable format.
 *
 * @see commmerce_currency_format(), the function from which this is adapted.
 *
 * @param $amount
 *   A numeric price amount value.
 * @param $currency_code
 *   The three character code of the currency.
 * @param $object
 *   When present, the object to which the price is attached.
 * @param $convert
 *   Boolean indicating whether or not the amount needs to be converted to a
 *   decimal price amount when formatting.
 *
 * @return string
 *   A fully formatted currency acceptable by Vantiv's API.
 */
function commerce_vantiv_creditcard_amount_to_decimal($amount, $currency_code) {
  return number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, '.', '');
}

/**
 * Returns the number of seconds for a lifespan of a card payment authorization.
 *
 * @param string $card_type Vantiv card type code, one of:
 *   - AX (American Express)
 *   - DC (Discover)
 *   - MC (MasterCard)
 *   - VI (Visa)
 *
 * @return int
 *   Number of seconds of the lifespan of a credit card payment authorization,
 *   will return the equivalent of 7 days if a supported card type doesn't match.
 */
function _commerce_vantiv_creditcard_authorization_lifespan($card_type) {
  $spans = [
    'AX' => 7,
    'DI' => 10,
    'MC' => 7,
    'VI' => 7,
  ];
  $default = 7 * 86400;
  return isset($spans[$card_type]) ? $spans[$card_type] * 86400 : $default;
}

/**
 * Returns the Vantiv license value from the payment method settings.
 *
 * @param array $payment_method
 *
 * @return string
 */
function _commerce_vantiv_creditcard_get_license($payment_method) {
  return $payment_method['settings']['license'];
}

/**
 * Returns the Vantiv api version from the payment method settings.
 *
 * @param array $payment_method
 *
 * @return string
 */
function _commerce_vantiv_creditcard_get_api_version($payment_method) {
  return 1;
}

/**
 * Returns the Vantiv base url from the payment method settings.
 *
 * @param array $payment_method
 *
 * @return string
 */
function _commerce_vantiv_creditcard_get_base_url($payment_method) {
  $urls = [
    VANTIV_TXN_MODE_PRODUCTION => 'https://apis.prod.vantiv.com/',
    VANTIV_TXN_MODE_INTEGRATION => 'https://apis.cert.vantiv.com',
  ];
  return $urls[$payment_method['settings']['txn_mode']];
}

/**
 * Returns the merchant id from the payment method settings.
 *
 * @param array $payment_method
 *
 * @return string
 */
function _commerce_vantiv_creditcard_get_merchant_id($payment_method) {
  return $payment_method['settings']['merchant_id'];
}

/**
 * Returns the report group from the payment method settings.
 *
 * @param array $payment_method
 * @param stdClass $order NOTE: May be an actual order or an empty stdClass.
 *
 * @return string
 */
function _commerce_vantiv_creditcard_get_report_group($payment_method, $order) {
  // @todo: Invoke hook to let modules update report group.
  return $payment_method['settings']['report_group'];
}

