<?php
/**
 * @file
 * Provides a credit card payment method for Vantiv.
 */

// Vantiv transaction mode definitions:
define('VANTIV_TXN_MODE_PRODUCTION', 'integration');
define('VANTIV_TXN_MODE_INTEGRATION', 'production');

/**
 * Implements hook_libraries_info().
 */
function commerce_vantiv_creditcard_libraries_info() {
  return array(
    'vantiv-devhub-php' => array(
      'name' => 'Vantiv DevHub API Client Library for PHP',
      'vendor url' => 'https://apideveloper.vantiv.com/',
      'download url' => 'https://github.com/steveoliver/vantiv-devhub-sdk-php',
      'dependencies' => array(),
      'version arguments' => array(
        'file' => 'VERSION',
        'pattern' => '/(\d+\.\d+\.\d+)/',
      ),
      'files' => array(
        'php' => array(
          'src/Vantiv/Request/Credit/Authorization.php',
          'src/Vantiv/Request/Credit/AuthorizationCompletion.php',
          'src/Vantiv/Request/Credit/CaptureGivenAuth.php',
          'src/Vantiv/Request/Credit/Credit.php',
          'src/Vantiv/Request/Credit/CreditReturn.php',
          'src/Vantiv/Request/Credit/Force.php',
          'src/Vantiv/Request/Credit/Reversal.php',
          'src/Vantiv/Request/Credit/Sale.php',
          'src/Vantiv/Request/Credit/Void.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vantiv_creditcard_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_vantiv_creditcard'] = array(
    'title' => t('Credit Card via Vantiv'),
    'description' => t('Provides credit card processing through Vantiv.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * @return array Default settings for the Vantiv Credit Card payment method.
 */
function _commerce_vantiv_creditcard_default_settings() {
  return array(
    'license' => '',
    'txn_mode' => VANTIV_TXN_MODE_INTEGRATION,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log' => array('request' => 0, 'response' => 0)
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_vantiv_creditcard_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + _commerce_vantiv_creditcard_default_settings();

  $form = array();

  $form['license'] = array(
    '#type' => 'textfield',
    '#title' => t('License ID'),
    '#description' => t('Your Vantiv application License ID. Visit !url to register for an account if you do not already have one.', array('!url' => 'https://apideveloper.vantiv.com/user/register')),
    '#default_value' => $settings['license'],
    '#required' => TRUE,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to Production when you are ready to start processing real payments.') . '<br />' . t('Only use Integration for testing your application integration with Vantiv.'),
    '#options' => array(
      VANTIV_TXN_MODE_PRODUCTION => t('Production (Live)'),
      VANTIV_TXN_MODE_INTEGRATION => t('Integration (Testing)'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_vantiv_creditcard_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Default to a known test credit card number. For valid numbers of other card
  // types see: http://www.rimmkaufman.com/blog/credit-card-test-numbers/09112007/
  return commerce_payment_credit_card_form(array(), array('number' => '4111111111111111'));
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_vantiv_creditcard_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Validate the credit card fields.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  // Even though a form error triggered by the validate handler would be enough
  // to stop the submission of the form, it's not enough to stop it from a
  // Commerce standpoint because of the combined validation / submission going
  // on per-pane in the checkout form. Thus even with a call to form_set_error()
  // this validate handler must still return FALSE.
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_vantiv_creditcard_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Just as an example, we might store information in the order object from the
  // payment parameters, though we would never save a full credit card number,
  // even in examples!
  $number = $pane_values['credit_card']['number'];
  $pane_values['credit_card']['number'] = substr($number, 0, 4) . str_repeat('-', strlen($number) - 8) . substr($number, -4);

  $order->data['commerce_vantiv_creditcard'] = $pane_values;

  // Every attempted transaction should result in a new transaction entity being
  // created for the order to log either the success or the failure.
  commerce_vantiv_creditcard_transaction($payment_method, $order, $charge);
}

/**
 * Creates a payment transaction for the specified method, order, and charge.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_vantiv_creditcard_transaction($payment_method, $order, $charge) {
  $card_details = $order->data['commerce_vantiv_creditcard']['credit_card'];

  $transaction = commerce_payment_transaction_new('commerce_vantiv_creditcard', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  $transaction->message = 'Number: @number<br/>Expiration: @month/@year';
  $transaction->message_variables = array(
    '@number' => $card_details['number'],
    '@month' => $card_details['exp_month'],
    '@year' => $card_details['exp_year'],
  );

  commerce_payment_transaction_save($transaction);
  return $transaction;
}
